#include <BO_algorithm_for_spheres.h>

template <typename SK>
void BO_algorithm_for_spheres<SK>::initialize_E(typename BO_algorithm_for_spheres<SK>::Sphere_handle const & sh,
    typename BO_algorithm_for_spheres<SK>::Circle_handle_list const & circles)
{
  // Cleaner code helpers
  typedef std::pair<Circular_arc_point_3, unsigned int> CAP;
  const Sphere_3 & s = *sh;

  // Normal event sites, mapped by corresponding point
  typedef std::map<Circular_arc_point_3,
          Normal_event_site> Normal_event_sites;
  Normal_event_sites normal_sites;
  // ...helper macro for redundant code
#define ADD_TO_NE_SITE(POINT, EVENT)                                     \
  { typename Normal_event_sites::iterator it = normal_sites.find(POINT); \
    if (it == normal_sites.end())                                        \
    { it = normal_sites.insert(std::make_pair(POINT,                     \
          Normal_event_site(sh, POINT))).first; }                        \
    it->second.add_event(EVENT); }

  // Polar event sites
  typedef std::vector<Polar_event_site> Polar_event_sites;
  Polar_event_sites pe_sites;

  // Bipolar event sites
  typedef std::vector<Bipolar_event_site> Bipolar_event_sites;
  Bipolar_event_sites bpe_sites;

  // Event builder for this sphere
  Event_builder eb(s);

  for (typename Circle_handle_list::const_iterator it = circles.begin();
      it != circles.end(); it++)
  {
    // Cleaner code
    const Circle_handle & ch1 = *it;
    const Circle_3 & c1 = *ch1;

    // Add circles events
    CGAL::Circle_type circle_type = CGAL::classify(c1, s);
    Circle_event_builder ceb = eb.prepare_circle_event(c1);
    if (circle_type == CGAL::NORMAL)
    {
      Circular_arc_point_3 extremes[2];
      CGAL::theta_extremal_points(c1, s, extremes);
      ADD_TO_NE_SITE(extremes[0], ceb.critical_event(extremes[0], Critical_event::Start));
      ADD_TO_NE_SITE(extremes[1], ceb.critical_event(extremes[1], Critical_event::End));
    }
    else if (circle_type == CGAL::POLAR)
    {
      // Line passing through the poles
      Line_3 pole_axis(s.center(), Direction_3(0, 0, 1));

      // Compute intersection
      Intersection_list pole_inters;
      Intersect_3()(pole_axis, c1, std::back_inserter(pole_inters));
      CGAL_assertion(pole_inters.size() == 1);
      CAP cap;
      Assign_3()(cap, pole_inters[0]);
      typename Polar_event::Pole_type pole_type = Polar_event::North;
      if (CGAL::compare_z(Circular_arc_point_3(s.center()), cap.first) == CGAL::SMALLER)
      { pole_type = Polar_event::South; }

      // Add polar events
      pe_sites.push_back(ceb.polar_event(cap.first, pole_type, Polar_event::Start));
      pe_sites.push_back(ceb.polar_event(cap.first, pole_type, Polar_event::End));
    }
    else if (circle_type == CGAL::BIPOLAR)
    {
      Vector_3 meridian_normals[2] = { c1.supporting_plane().orthogonal_vector() };
      meridian_normals[1] = -meridian_normals[0];
      std::sort(meridian_normals, meridian_normals + 2, Compare_theta_3(s));
      bpe_sites.push_back(ceb.bipolar_event(meridian_normals[0], Bipolar_event::Start));
      bpe_sites.push_back(ceb.bipolar_event(meridian_normals[1], Bipolar_event::End));
    }

    // Make crossing/tangency events
    for (typename Circle_handle_list::const_iterator it2 = it + 1;
        it2 != circles.end(); it2++)
    {
      // *More* syntaxic sugar
      const Circle_handle & ch2 = *it2;
      const Circle_3 & c2 = *ch2;

      // Intersection circles must be different
      CGAL_assertion(ch1 != ch2 && c1 != c2);

      // Do intersections
      Intersection_list circle_intersections;
      Intersect_3()(c1, c2, std::back_inserter(circle_intersections));

      // Handle intersections
      if (circle_intersections.empty())
      { continue; }
      else if (circle_intersections.size() == 1) // Equality or Tangency
      {
        // Test if intersection is a point -> tangency
        CAP cap;
        if (Assign_3()(cap, circle_intersections[0]))
        {
          // Handle circle tangency
          ADD_TO_NE_SITE(cap.first, eb.intersection_event(ch1, ch2, cap.first, Intersection_event::Tangency));
          continue;
        }

        // Intersection is necessarily a circle
        Circle_3 c;
        Assign_3()(c, circle_intersections[0]);
        // TODO decide if anything should be done
      }
      else // Crossing
      {
        // There is necessarily two intersections
        CGAL_assertion(circle_intersections.size() == 2);

        CAP cap1, cap2;
        Assign_3()(cap1, circle_intersections[0]);
        Assign_3()(cap2, circle_intersections[1]);
        CGAL_assertion(cap1.second == 1 && cap2.second == 1);

        // Handle circle crossing
        // ...first point
        ADD_TO_NE_SITE(cap1.first, eb.intersection_event(ch1, ch2, cap1.first, Intersection_event::Largest_crossing));
        ADD_TO_NE_SITE(cap1.first, eb.intersection_event(ch1, ch2, cap1.first, Intersection_event::Smallest_crossing));
        // ...second point
        ADD_TO_NE_SITE(cap2.first, eb.intersection_event(ch1, ch2, cap2.first, Intersection_event::Largest_crossing));
        ADD_TO_NE_SITE(cap2.first, eb.intersection_event(ch1, ch2, cap2.first, Intersection_event::Smallest_crossing));
      }
    }
  }

  // Build (finally) event queue
  _E.clear();

  // Now that the normal events are all regrouped in event sites,
  // add all the event sites to the event queue
  for (typename Normal_event_sites::const_iterator it = normal_sites.begin();
      it != normal_sites.end(); it++)
  { _E.push(it->second); }
  // ...same for polar events sites
  for (typename Polar_event_sites::const_iterator it = pe_sites.begin();
      it != pe_sites.end(); it++)
  { _E.push(*it); }
  // ...same for bipolar event sites
  for (typename Bipolar_event_sites::const_iterator it = bpe_sites.begin();
      it != bpe_sites.end(); it++)
  { _E.push(*it); }
}

template <typename SK>
void BO_algorithm_for_spheres<SK>::initialize_V(typename BO_algorithm_for_spheres<SK>::Sphere_handle const & sh,
    typename BO_algorithm_for_spheres<SK>::Circle_handle_list const & circles)
{
  const Sphere_3 & s = *sh;
  std::set<Intersected_arc> ini_V;
  Vector_3 meridian(0, 1, 0);
  Line_3 pole_axis(s.center(), Direction_3(0, 0, 1));
  Circular_arc_3 meridian_arc;
  typedef std::pair<Circular_arc_point_3, unsigned int> CAP;
  Intersection_list poles;
  Intersect_3()(pole_axis, s, std::back_inserter(poles));
  CGAL_assertion(poles.size() == 2);
  CAP north_cap, south_cap;
  Assign_3()(north_cap, poles[0]);
  Assign_3()(south_cap, poles[1]);
  meridian_arc = Circular_arc_3(Circle_3(s, Plane_3(s.center(), meridian)), north_cap.first, south_cap.first);
  for (typename std::vector<Circle_handle>::const_iterator it = circles.begin();
      it != circles.end(); it++)
  {
    const Circle_3 & c = **it;
    CGAL::Circle_type circle_type = CGAL::classify(c, s); // this has already been computed...
    Intersection_list ini_intersected_arcs;
    Intersect_3()(meridian_arc, c, std::back_inserter(ini_intersected_arcs));
    if (ini_intersected_arcs.empty())
    { continue; }
    else if (ini_intersected_arcs.size() == 2) // two intersections
    {
      CAP cap[2];
      Assign_3()(cap[0], ini_intersected_arcs[0]);
      Assign_3()(cap[1], ini_intersected_arcs[1]);
      CGAL_assertion(std::adjacent_find(cap, cap + 2, std::greater<CAP>()) == cap + 2); // points must already be sorted (add a sort otherwise)
      if (circle_type == CGAL::NORMAL)
      {
        Circular_arc_point_3 extremes[2];
        CGAL::theta_extremal_points(c, s, extremes);
        ini_V.insert(Intersected_arc(s, cap[0].first, Circular_arc_3(c, extremes[0], extremes[1])));
        ini_V.insert(Intersected_arc(s, cap[1].first, Circular_arc_3(c, extremes[1], extremes[0])));
      }
      else // necessarily a polar circle, intersected traversely by the meridian
      {
        ini_V.insert(Intersected_arc(s, cap[1].first, Circular_arc_3(c, cap[0].first)));
      }
    }
    else // only one intersection (maybe tangeancy)
    {
      CAP cap;
      Assign_3()(cap, ini_intersected_arcs[0]);

      if (circle_type == CGAL::NORMAL && CGAL::theta_extremal_point(c, s, true) == cap.first) // normal circle tangeant to meridian
      {
        Circular_arc_point_3 extremes[2];
        CGAL::theta_extremal_points(c, s, extremes);
        CGAL_assertion(cap.first == extremes[1]);
        ini_V.insert(Intersected_arc(s, cap.first, Circular_arc_3(c, extremes[0], extremes[1])));
        ini_V.insert(Intersected_arc(s, cap.first, Circular_arc_3(c, extremes[1], extremes[0])));
      }
      else if (circle_type == CGAL::POLAR) // polar circle tangeant to meridian
      {
        // FIXME check if end point is on tangeant meridian/circle
        // and if so, insert arc from full circle + corresponding pole
      }
      else // threaded circle crossed by meridian
      {
        CGAL_assertion(circle_type == CGAL::THREADED);
        ini_V.insert(Intersected_arc(s, cap.first, Circular_arc_3(c, cap.first)));
      }
    }
  }

  // Finished initializing, copy to V-ordering
  for (typename std::set<Intersected_arc>::const_iterator it = ini_V.begin(); it != ini_V.end(); it++)
  { _V.push_back(it->arc); }
}

template <typename SK>
void BO_algorithm_for_spheres<SK>::run_for(typename SK::Sphere_3 const & sphere)
{
  // Sphere to work with
  Sphere_handle sh = _si.add_sphere(sphere);
  if (sh.is_null())
  {
    sh = _si.find_sphere(sphere);
    if (sh.is_null())
    { sh = _si.add_sphere(sphere); }
  }
  CGAL_assertion(sh.is_null() == false);

  // Get circles on sphere
  Circle_handle_list circles;
  _si.circles_on_sphere(sh, std::back_inserter(circles));

  // Event queue
  std::cout << "Starting event queue initialization" << std::endl;
  boost::thread ini_E(boost::bind(&Self::initialize_E, this, sh, circles));

  // V-ordering
  std::cout << "Starting v-ordering initialization" << std::endl;
  boost::thread ini_V(boost::bind(&Self::initialize_V, this, sh, circles));

  // Finish initializing
  ini_V.join();
  std::cout << "V-ordering initialization finished" << std::endl;
  ini_E.join();
  std::cout << "Event queue initialization finished" << std::endl;

  // Initialize arrangement
  // TODO

  // Iterate over the event queue and get corresponding arcs
  std::cout << "Handling events" << std::endl;
  for (Event_site_type ev_type = _E.next_event();
      ev_type != EQ::None; ev_type = _E.next_event())
  {
    if (ev_type == EQ::Polar)
    {
      std::cout << "Handling polar event" << std::endl;
      Polar_event_site pes = _E.pop_polar();
      break_adjacencies(pes);
      handle_polar_event_site(pes);
    }
    else if (ev_type == EQ::Bipolar)
    {
      std::cout << "Handling bipolar event" << std::endl;
      Bipolar_event_site bpes = _E.pop_bipolar();
      break_adjacencies(bpes);
      handle_bipolar_event_site(bpes);
    }
    else
    {
      CGAL_assertion(ev_type == EQ::Normal);
      std::cout << "Handling normal event" << std::endl;
      Normal_event_site nes = _E.pop_normal();
      break_adjacencies(nes);
      handle_event_site(nes);
    }
  }

  // Merge virtual faces
  // TODO
}

template <typename SK>
void BO_algorithm_for_spheres<SK>::break_adjacencies(typename BO_algorithm_for_spheres<SK>::Normal_event_site const & nes)
{
}

template <typename SK>
void BO_algorithm_for_spheres<SK>::break_adjacencies(typename BO_algorithm_for_spheres<SK>::Polar_event_site const & pes)
{
}

template <typename SK>
void BO_algorithm_for_spheres<SK>::break_adjacencies(typename BO_algorithm_for_spheres<SK>::Bipolar_event_site const & bpes)
{
}

template <typename SK>
void BO_algorithm_for_spheres<SK>::handle_event_site(typename BO_algorithm_for_spheres<SK>::Normal_event_site const &)
{
}

template <typename SK>
void BO_algorithm_for_spheres<SK>::handle_polar_event_site(typename BO_algorithm_for_spheres<SK>::Polar_event_site const &)
{
}

template <typename SK>
void BO_algorithm_for_spheres<SK>::handle_bipolar_event_site(typename BO_algorithm_for_spheres<SK>::Bipolar_event_site const &)
{
}

// vim: sw=2 et ts=2 sts=2
