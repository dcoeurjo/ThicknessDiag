#include <Sphere_intersecter.h>

template <typename SK>
typename Sphere_intersecter<SK>::Sphere_handle Sphere_intersecter<SK>::add_sphere(typename SK::Sphere_3 const & sphere_to_insert)
{
  // Store a copy of the inserted sphere
  _sphere_storage.push_front(sphere_to_insert);
  const Sphere_3 & s1 = _sphere_storage.front();
  Sphere_handle sh1(s1);
  bool already_added = false;

  // No need to test for intersections when there is only one element
  if (_sphere_tree.size() > 1)
  {
    // Container receiving intersected spheres
    std::vector<Sphere_handle> it_spheres;

    // Find intersected balls
    _sphere_tree.all_intersected_primitives(*sh1,
        std::inserter(it_spheres, it_spheres.begin()));

    // Handle intersections
    for (INFER_AUTO(it, it_spheres.begin()); it != it_spheres.end(); it++)
    {
      // Syntaxic sugar
      Sphere_handle sh2(*it);
      const Sphere_3 & s2 = *sh2;

      // Insertion of two equal spheres is forbidden here
      if (s1 == s2)
      { already_added = true;
        break; }

      // Try intersection
      Object_3 obj = Intersect_3()(s1, s2);

      // No intersection -> end
      if (obj.is_empty())
      { continue; }

      // Different intersections
      Circle_3 it_circle;
      Point_3 it_point;
      if (Assign_3()(it_circle, obj) == false && Assign_3()(it_point, obj))
      { Line_3 it_line(s1.center(), s2.center());
        it_circle = Circle_3(it_point, 0,
            it_line.perpendicular_plane(it_point)); }

        // Store the circle of intersection
        _circle_storage.push_front(it_circle);
        Circle_handle ch(_circle_storage.front());

        // Setup the links
        _ctsl[ch] = Sphere_handle_pair(sh1, sh2);
        Circle_link & sc1 = _stcl[sh1]; sc1.insert(sc1.begin(), ch);
        Circle_link & sc2 = _stcl[sh2]; sc2.insert(sc2.begin(), ch);
    }
  }
  else if (_sphere_storage.size() == 2)
  {
    // Insertion of two equal spheres is forbidden here
    const Sphere_3 & s2 = *(++_sphere_storage.begin());
    if (s1 == s2)
    { already_added = true; }
  }

  // Insert a handle of the sphere in the tree,
  // if all is good
  if (already_added)
  { remove_sphere_links(sh1);
    _sphere_storage.pop_front();
    return Sphere_handle(); }
  else
  { _sphere_tree.insert(Sphere_primitive(s1));
    return sh1; }
}

template <typename SK>
typename Sphere_intersecter<SK>::Sphere_handle Sphere_intersecter<SK>::find_sphere(typename SK::Sphere_3 const & s) const
{
  std::vector<Sphere_handle> it_spheres;
  _sphere_tree.all_intersected_primitives(s,
      std::inserter(it_spheres, it_spheres.begin()));
  INFER_AUTO(it, std::find(it_spheres.begin(), it_spheres.end(), s));
  return (it != it_spheres.end()) ? *it : Sphere_handle();
}

template <typename SK>
typename Sphere_intersecter<SK>::Circle_handle Sphere_intersecter<SK>::find_circle_in_sphere(const Sphere_intersecter<SK>::Sphere_handle & sh, typename SK::Circle_3 const & c) const
{
  INFER_AUTO(it, _stcl.find(sh));
  if (it != _stcl.end())
  {
    for (INFER_AUTO(c_it, it->second.begin());
        c_it != it->second.end(); c_it++)
    { if (c_it->ref() == c)
      { return *c_it; } }
  }
  return Circle_handle();
}

template <typename SK>
typename Sphere_intersecter<SK>::Circle_handle Sphere_intersecter<SK>::find_circle_in_sphere(typename SK::Sphere_3 const & s, typename SK::Circle_3 const & c) const
{
  Sphere_handle sh = find_sphere(s);
  if (sh.is_null() == false)
  { return find_circle_in_sphere(sh, c); }
  return Circle_handle();
}

template <typename SK>
typename Sphere_intersecter<SK>::Sphere_handle_pair Sphere_intersecter<SK>::originating_spheres(const Sphere_intersecter<SK>::Circle_handle & ch) const
{
  Sphere_handle_pair shp;
  INFER_AUTO(it, _ctsl.find(ch));
  if (it != _ctsl.end())
  { shp = it->second; }
  return shp;
}

template <typename SK>
bool Sphere_intersecter<SK>::remove_sphere(const Sphere_intersecter<SK>::Sphere_handle & sh)
{
  // Remove from links
  remove_sphere_links(sh);

  // Remove from storage
  std::size_t saved_size = _sphere_storage.size();
  for (INFER_AUTO(it, _sphere_storage.begin());
      it != _sphere_storage.end(); it++)
  {
    const Sphere_3 & s2 = *it;
    if (sh.ptr() == &s2)
    {
      _sphere_storage.erase(it);
      break;
    }
  }

  // Rebuild tree
  if (saved_size != _sphere_storage.size())
  {
    _sphere_tree.clear();
    for (INFER_AUTO(it, _sphere_storage.begin());
        it != _sphere_storage.end(); it++)
    { _sphere_tree.insert(Sphere_primitive(*it)); }
    return true;
  }
  return false;
}

template <typename SK>
typename Sphere_intersecter<SK>::Bounding_box Sphere_intersecter<SK>::bbox() const
{ return (_sphere_tree.size() > 1)
  ? _sphere_tree.bbox() : Bounding_box(); }

template <typename SK>
void Sphere_intersecter<SK>::remove_sphere_links(typename Sphere_intersecter<SK>::Sphere_handle const & sh)
{
  INFER_AUTO(sphere_it, _stcl.find(sh));
  if (sphere_it != _stcl.end())
  {
    for (INFER_AUTO(it, sphere_it->second.begin());
        it != sphere_it->second.end(); it++)
    {
      const Circle_handle & ch(*it);
      INFER_AUTO(circle_it, _ctsl.find(ch));
      const Sphere_handle_pair & shp = circle_it->second;
      CGAL_assertion(shp.first == sh || shp.second == sh);
      const Sphere_handle & sh2 = (shp.first != sh)
        ? shp.first : shp.second;
      CGAL_assertion(sh2 != sh);
      INFER_AUTO(sphere_it2, _stcl.find(sh2));
      CGAL_assertion(sphere_it2 != _stcl.end());
      sphere_it2->second.erase(std::find(sphere_it2->second.begin(),
            sphere_it2->second.end(), ch));
      _ctsl.erase(*it);
    }
    _stcl.erase(sphere_it);
  }
}

// vim: sw=2 et ts=2 sts=2
