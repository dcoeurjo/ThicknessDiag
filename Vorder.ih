#include <Vorder.h>
#include <algorithm>

template <typename SK>
Vorder<SK>::Vorder(typename SK::Vector_3 const & meridian):
  _mer(meridian), _comp(meridian) {}

template <typename SK>
bool Vorder<SK>::insert(typename SK::Circular_arc_3 const & arc)
{ return _arcs.insert(std::lower_bound(_arcs.begin(), _arcs.end(), arc, _comp), arc) == _arcs.end(); }

template <typename SK>
bool Vorder<SK>::contains(typename SK::Circular_arc_3 const & arc) const
{ return std::upper_bound(_arcs.begin(), _arcs.end(), arc, _comp) == _arcs.end(); }

template <typename SK>
bool Vorder<SK>::erase(typename SK::Circular_arc_3 const & arc)
{
  std::size_t old_size = _arcs.size();
  _arcs.erase(std::lower_bound(_arcs.begin(), _arcs.end(), arc, _comp),
    std::upper_bound(_arcs.begin(), _arcs.end(), arc, _comp));
  return old_size > _arcs.size();
}

template <typename SK>
void Vorder<SK>::set_meridian(const Vector_3 & meridian)
{
  _comp.mer = _mer = meridian;
  std::sort(_arcs.begin(), _arcs.end(), _comp);
}

// vim: sw=2 et ts=2 sts=2
